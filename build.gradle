// todo remake the buildscript and use kotlin instead

plugins {
	id 'java'
	id 'maven-publish'
}

version 'v1.9'
group = 'com.github.mnemotechnician'

def windows = System.getProperty("os.name").toLowerCase().contains("windows")

//compile java 16 code, targeting java 8
targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main.java.srcDirs = ["src"]

repositories{
	mavenCentral()
	maven{ url 'https://maven.xpdustry.com/mindustry' }
	maven{ url 'https://www.jitpack.io' }
}

ext{
	sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

allprojects{
	tasks.withType(JavaCompile){
		options.compilerArgs.addAll(['--release', '8'])
	}
}

dependencies{
	compileOnly "com.github.Anuken:mindustryjitpack:v147"
	compileOnly "com.github.Anuken.Arc:arc-core:v147"
	compileOnly "com.github.Anuken.Arc:extensions:v147"

	annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.1'

	implementation "com.github.mnemotechnician:autoupdate-lib:-SNAPSHOT"
}

task jarAndroid{
	dependsOn "jar"
	
	doLast{
		def d8 = windows ? "d8.bat" : "d8"

		if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

		def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

		if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

		//collect dependencies needed for desugaring
		def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
	
	System.out.println("dependencies: ${dependencies}")
	
		//dex and desugar files - this requires d8 in your PATH
		"$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
			.execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
	}
}

jar{
	archiveFileName = "${project.archivesBaseName}Desktop.jar"

	from{configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }}

	from(rootDir){
		include "mod.hjson"
		include "icon.png"
	}

	from("assets/"){
		include "**"
	}
}

task deploy(type: Jar){
	dependsOn jarAndroid
	dependsOn jar
	archiveFileName = "${project.archivesBaseName}.jar"

	from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

	doLast{
		delete{
			delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
			delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
		}
	}
}

publishing {
	publications {
		library(MavenPublication) {
			from components.java
		}
	}
}
